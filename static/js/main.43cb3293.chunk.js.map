{"version":3,"sources":["helpers/contexts/stock-detail.contexts.jsx","helpers/custom-button/custom-button.component.jsx","helpers/contexts/user-detail.contexts.jsx","stockComponents/buy-stocks.components.jsx","helpers/form-input/form-input.component.jsx","stockCards/stock-cards.components.jsx","helpers/contexts/user-stocks.contexts.jsx","stockComponents/sell-stocks.components.jsx","userStocks/user-stocks.components.jsx","chatComponents/UsersList.jsx","chatComponents/MessageBox.jsx","chatComponents/Chat.jsx","chatComponents/Container.jsx","helpers/contexts/chat-channel.contexts.jsx","helpers/contexts/chat-connection.contexts.jsx","wallet/wallet.component.jsx","stockComponents/play-page.components.jsx","userComponents/login.component.jsx","userComponents/signUp.component.jsx","userComponents/loginAndSignUp.component.jsx","App.js","serviceWorker.js","index.js"],"names":["AllStocksContext","createContext","stock","userWalletDetails","CustomButton","children","otherProps","className","UserDetailContext","userDetails","BuyStocks","props","currentWalletBalance","totalCostOfPurchase","numberOfStocks","cancelTransaction","updatedPerSharePrice","pershareprice","availablestocks","totalstocks","Number","useContext","console","log","purchaseHandler","event","a","preventDefault","fetch","email","method","headers","body","JSON","stringify","walletBalance","walletUpdate","json","walletUpdateJson","id","toFixed","stockUpdate","stockUpdateJson","stockName","stockname","userStocks","userStocksJson","err","Error","onClick","FormInput","handleChange","label","onChange","value","length","StockCard","stocksymbol","useState","setNumberOfStocks","isPurchaseAble","setIsPurchaseAble","setCurrentWalletBalance","setTotalCostOfPurchase","type","name","target","alert","UserStocksContext","stockData","stockList","SellStock","numberOfStocksToSell","cancelSell","userStock","stockBeingSold","filter","amountAddedToWallet","sellConfirm","UserStocks","setNumberOfStocksToSell","sellingConfirmation","setSellingConfirmation","min","max","UsersList","users","toggleConnection","connectedTo","connecting","map","userName","key","disabled","loading","undefined","MessageBox","messages","message","setMessage","sendMsg","sender","text","time","formatRelative","Date","e","placeholder","color","configuration","iceServers","url","Chat","connection","updateConnection","channel","updateChannel","socketOpen","setSocketOpen","socketMessages","setSocketMessages","isLoggedIn","setIsLoggedIn","setName","loggingIn","setLoggingIn","setUsers","setConnectedTo","setConnecting","connectedRef","useRef","webSocket","messagesRef","setMessages","useEffect","current","WebSocket","onmessage","data","parse","prev","onclose","close","pop","onLogin","updateUsersList","removeUser","onOffer","onAnswer","onCandidate","send","user","u","handleDataChannelMessageReceived","userMessages","newMessages","Object","assign","success","loggedIn","localConnection","RTCPeerConnection","onicecandidate","candidate","ondatachannel","receiveChannel","onopen","offer","setRemoteDescription","RTCSessionDescription","then","createAnswer","answer","setLocalDescription","localDescription","catch","addIceCandidate","RTCIceCandidate","dataChannel","createDataChannel","onerror","error","createOffer","handleConnection","format","Container","ConnectionConsumer","ChannelConsumer","ChannelContext","ConnectionContext","MoneyAdder","cancelAdding","amountToAdd","setAmountToAdd","addMoney","onSubmit","Wallet","moreMoneyNeeded","setMoreMoneyNeeded","Consumer","PlayPage","setStockList","userStocksList","setUserStocksList","setUserWalletDetails","allStockSearchField","setAllStockSearchField","userStockSearchField","setUserStockSearchField","setconnection","setChannel","getUserWallet","EventSource","userWalletJson","wallet","allStocksJson","stocks","getAllStocks","currentUserStocks","filteredStockList","toLowerCase","includes","filteredUserStocksList","Provider","conn","chn","LoginPage","password","userCredentials","setCredentials","loginHandler","response","responseData","localStorage","clear","setItem","walletDetails","SignUpPage","username","signUpHandler","signUpResponse","signUpResponseJson","SignInAndSignUpPage","App","getItem","removeItem","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43cb3293.chunk.js","sourcesContent":["import { createContext } from 'react';\n\n\nconst AllStocksContext = createContext({\n    stock: {},\n    userWalletDetails: {}\n});\n\nexport default AllStocksContext;","import React from 'react';\n\nimport './custom-button.styles.scss';\n\nconst CustomButton = ({ children, ...otherProps }) => (\n  <button className='custom-button' {...otherProps}>\n    {children}\n  </button>\n);\n\nexport default CustomButton;\n","import { createContext } from 'react';\n\n\nconst UserDetailContext = createContext({\n    userDetails: {}\n});\n\nexport default UserDetailContext;","import React, { useContext } from 'react';\nimport CustomButton from '../helpers/custom-button/custom-button.component';\nimport UserDetailContext from '../helpers/contexts/user-detail.contexts';\n\n\nconst BuyStocks = (props) => {\n    const { currentWalletBalance, totalCostOfPurchase, stock, numberOfStocks, cancelTransaction } = props;\n    const updatedPerSharePrice = (stock.pershareprice * stock.availablestocks)/(stock.totalstocks - Number(numberOfStocks));\n    const { userDetails } = useContext(UserDetailContext);\n    console.log(userDetails);\n    \n    // console.log(userDetails, stock);\n    const purchaseHandler = async (event) => {\n        event.preventDefault();\n        console.log('purchase handler');\n        try {\n            const walletUpdate = await fetch(`https://stock-raid-basic-server.herokuapp.com/api/wallet/${userDetails.email}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    walletBalance: currentWalletBalance - totalCostOfPurchase,\n                })\n            });\n            console.log('purchase handler2');\n            const walletUpdateJson = await walletUpdate.json();\n            console.log(walletUpdateJson);\n            // console.log(updatedPerSharePrice);\n            \n            const stockUpdate = await fetch(`https://stock-raid-basic-server.herokuapp.com/api/stocks/${stock.id}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    pershareprice: (updatedPerSharePrice).toFixed(2),\n                    availablestocks: stock.availablestocks - numberOfStocks\n                })\n            });\n            console.log('purchase handler3');\n            const stockUpdateJson = await stockUpdate.json();\n            console.log(stockUpdateJson);\n\n            const userStocks = await fetch('https://stock-raid-basic-server.herokuapp.com/api/userStocks', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    email: userDetails.email,\n                    stockName: stock.stockname,\n                    numberOfStocks,\n                    totalCostOfPurchase\n                })\n            });\n            const userStocksJson = await userStocks.json();\n            console.log(userStocksJson);\n            await cancelTransaction();\n            \n        } catch (error) {\n            const err = new Error('Transaction failed', 500);\n            return err;\n        }\n    }\n    const cancelButton = () => {\n        cancelTransaction();\n    };\n    return (\n        <>\n        <div>\n            <h2>{`Your current wallet balance: ${currentWalletBalance.toFixed(2)}`}</h2>\n            <h2>{`Cost of this Purchase: $${totalCostOfPurchase.toFixed(2)}`}</h2> \n            <h2>{`Wallet Balance after this transaction: $${(currentWalletBalance - totalCostOfPurchase).toFixed(2)}`}</h2> \n            <h3>Click <h4>CONFIRM</h4> if you you wish to continue</h3>\n        </div>\n        <CustomButton onClick={purchaseHandler}>CONFIRM</CustomButton>\n        <CustomButton onClick={cancelButton}>CANCEL</CustomButton>\n        </>\n    )\n}\n\nexport default BuyStocks;","import React from 'react';\n\nimport './form-input.styles.scss';\n\nconst FormInput = ({ handleChange, label, ...otherProps }) => (\n  <div className='group'>\n    <input className='form-input' onChange={handleChange} {...otherProps} />\n    {label ? (\n      <label\n        className={`${\n          otherProps.value.length ? 'shrink' : ''\n        } form-input-label`}\n      >\n        {label}\n      </label>\n    ) : null}\n  </div>\n);\n\nexport default FormInput;\n","import React, { useState, useContext } from 'react';\nimport AllStocksContext from '../helpers/contexts/stock-detail.contexts';\nimport BuyStocks from '../stockComponents/buy-stocks.components';\nimport FormInput from '../helpers/form-input/form-input.component';\nimport CustomButton from '../helpers/custom-button/custom-button.component';\nimport './stock-cards.styles.css';\nimport '../App.css'\n\nfunction StockCard() {\n    const { stock, userWalletDetails } = useContext(AllStocksContext);\n    const { stockname, stocksymbol, pershareprice } = stock;\n    const [value, setValue] = useState(Number(pershareprice));\n    const [numberOfStocks, setNumberOfStocks] = useState('');\n    const [isPurchaseAble, setIsPurchaseAble] = useState(false);\n    const [currentWalletBalance, setCurrentWalletBalance] = useState('');\n    const [totalCostOfPurchase, setTotalCostOfPurchase] = useState(0);\n    const handleChange = event => {\n        const { value } = event.target;\n        setNumberOfStocks(value);\n    };\n    \n    const buyStockFunction = () => {\n        setCurrentWalletBalance(userWalletDetails.walletBalance);\n        setTotalCostOfPurchase(pershareprice * Number(numberOfStocks));\n        if (currentWalletBalance < totalCostOfPurchase) {\n            alert(`You don\\'t have enough balance in your wallet to make this transaction \\n\\n\n            add ${totalCostOfPurchase - userWalletDetails.walletBalance} more to your wallet to do this transaction`);\n            return;\n        } else {\n            currentWalletBalance >= totalCostOfPurchase ? setIsPurchaseAble(true) : setIsPurchaseAble(false);\n            return isPurchaseAble;\n        }\n    };\n    const cancelTransaction = () => {\n        setIsPurchaseAble(false);\n        setNumberOfStocks('')\n    }\n    // console.log(userWalletDetails);\n    \n    return (\n        <div className='card-container'>\n            <h3>{stockname}</h3>\n            <h4>{stocksymbol}</h4>\n            <h4>${value}</h4>\n            <FormInput\n                type='number'\n                name='stockquantity'\n                label='Number of stocks'\n                value={numberOfStocks}\n                onChange={handleChange}\n            />\n            <CustomButton onClick={buyStockFunction}>BUY</CustomButton>\n            {\n                isPurchaseAble &&\n                <BuyStocks\n                    stock={stock}\n                    currentWalletBalance={currentWalletBalance}\n                    totalCostOfPurchase={totalCostOfPurchase}\n                    numberOfStocks={numberOfStocks}\n                    cancelTransaction={cancelTransaction}\n                />\n            }\n        </div>\n    )\n}\n\nexport default StockCard;\n","import { createContext } from 'react';\n\n\nconst UserStocksContext = createContext({\n    stockData: {},\n    userWalletDetails: {},\n    stockList: {}\n});\n\nexport default UserStocksContext;","import React, { useContext } from 'react';\nimport CustomButton from '../helpers/custom-button/custom-button.component';\nimport UserStocksContext from '../helpers/contexts/user-stocks.contexts';\n\nconst SellStock = (props) => {\n    \n    const { numberOfStocksToSell, cancelSell } = props;\n    const { userStock, userWalletDetails, stockList } = useContext(UserStocksContext);\n    const stockBeingSold = stockList.filter(stock => stock.stockname === userStock.stockName);\n    const amountAddedToWallet = stockBeingSold[0].pershareprice * numberOfStocksToSell;\n    const updatedPerSharePrice = (stockBeingSold[0].pershareprice * stockBeingSold[0].availablestocks)/(stockBeingSold[0].totalstocks - Number(numberOfStocksToSell));\n    console.log(updatedPerSharePrice);\n    console.log(stockBeingSold[0].pershareprice);\n    console.log(stockBeingSold[0].availablestocks);\n    console.log(stockBeingSold[0].totalstocks);\n    console.log(Number(numberOfStocksToSell));\n    console.log(stockBeingSold[0].pershareprice);\n    \n    \n    // console.log(stockBeingSold[0].stockname, userWalletDetails.email, stockBeingSold[0].id);\n    \n    const sellConfirm = async (event) => {\n        event.preventDefault();\n        console.log('purchase handler');\n        try {\n            const walletUpdate = await fetch(`https://stock-raid-basic-server.herokuapp.com/api/wallet/${userWalletDetails.email}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    walletBalance: userWalletDetails.walletBalance + amountAddedToWallet,\n                })\n            });\n            console.log('purchase handler2');\n            const walletUpdateJson = await walletUpdate.json();\n            console.log(walletUpdateJson);\n            // console.log(updatedPerSharePrice);\n            \n            const stockUpdate = await fetch(`https://stock-raid-basic-server.herokuapp.com/api/stocks/${stockBeingSold[0].id}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    pershareprice: Number(updatedPerSharePrice),\n                    availablestocks: Number(stockBeingSold[0].availablestocks) + Number(numberOfStocksToSell)\n                })\n            });\n            console.log('purchase handler3');\n            const stockUpdateJson = await stockUpdate.json();\n            // console.log(stockUpdateJson);\n            // console.log(numberOfStocksToSell);\n            \n            const userStocks = await fetch(`https://stock-raid-basic-server.herokuapp.com/api/userStocks/${userStock.id}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    stockName: stockBeingSold[0].stockname,\n                    numberOfStocks: userStock.numberOfStocks - numberOfStocksToSell,\n                })\n            });\n            console.log('pur hand 4')\n            const userStocksJson = await userStocks.json();\n            await cancelSell();\n            console.log(userStocksJson);\n            \n        } catch (error) {\n            const err = new Error('Transaction failed', 500);\n            return err;\n        }\n    };\n    const cancelButton = () => {\n        cancelSell();\n    }\n    return (\n        <>\n        <h3>Stocks being Sold: {numberOfStocksToSell}</h3>\n        <h3>Value of Stocks {amountAddedToWallet}</h3>\n        <h3>Wallet Balance After Sell {userWalletDetails.walletBalance + amountAddedToWallet}</h3>\n        <CustomButton onClick={sellConfirm}>CONFIRM</CustomButton>\n        <CustomButton onClick={cancelButton}>CANCEL</CustomButton>\n        </>\n    )\n}\n\nexport default SellStock;","import React, { useState, useContext } from 'react';\nimport UserStocksContext from '../helpers/contexts/user-stocks.contexts';\nimport SellStock from '../stockComponents/sell-stocks.components';\nimport FormInput from '../helpers/form-input/form-input.component';\nimport CustomButton from '../helpers/custom-button/custom-button.component';\nimport './user-stocks.styles.css';\n\nfunction UserStocks() {\n    const { userStock } = useContext(UserStocksContext);\n    const { numberOfStocks, stockName, totalCostOfPurchase } = userStock;\n    const [numberOfStocksToSell, setNumberOfStocksToSell] = useState('');\n    const [sellingConfirmation, setSellingConfirmation] = useState(false)\n    const sellStock = () => setSellingConfirmation(true);\n    const handleChange = event => {\n        const { value } = event.target;\n        setNumberOfStocksToSell(value);\n    };\n    // console.log(`usersStockList = ${stockList}`);\n\n    const cancelSell = () => {\n        setSellingConfirmation(false);\n        setNumberOfStocksToSell('');\n    }\n    \n    return (\n        <div className='user-stock-card-container userStock-card'>\n            <h2>Stocks You Have</h2>\n            <div>{stockName}</div>\n            <div>{userStock.numberOfStocks}</div>\n            <div>{totalCostOfPurchase}</div>\n            <FormInput\n                type='number'\n                name='stockquantity'\n                label='Number of stocks'\n                value={numberOfStocksToSell}\n                onChange={handleChange}\n                min={1}\n                max={numberOfStocks}\n            />\n            <CustomButton onClick={sellStock}>SELL</CustomButton>\n            {sellingConfirmation && \n            <SellStock numberOfStocksToSell={numberOfStocksToSell} cancelSell={cancelSell}/>}\n        </div>\n    )\n}\n\nexport default UserStocks;","import React from \"react\";\nconst UsersList = ({ users, toggleConnection, connectedTo, connecting }) => {\n  return (\n      <div>\n        <span>Online Users</span>\n        <div>\n          {(users.length && (\n            <div>\n              {users.map(({ userName }) => (\n                <div key={userName}>\n                  <div>\n                    <button\n                      onClick={() => {\n                        toggleConnection(userName);\n                      }}\n                      disabled={!!connectedTo && connectedTo !== userName}\n                      loading={connectedTo === userName ? connecting : undefined}\n                    >\n                      {connectedTo === userName ? \"Disconnect\" : \"Connect\"}\n                    </button>\n                  </div>\n                  <div>\n                    <span>{userName}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )) || <span>There are no users Online</span>}\n        </div>\n      </div>\n  );\n};\nexport default UsersList;","import React from \"react\";\nimport { formatRelative } from \"date-fns\";\nimport FormInput from \"../helpers/form-input/form-input.component\";\nimport CustomButton from \"../helpers/custom-button/custom-button.component\";\nconst MessageBox = ({ messages, connectedTo, message, setMessage, sendMsg, name }) => {\n  return (\n        <div className='chat' >\n          <span>{!!connectedTo ? connectedTo : \"Not chatting with anyone currently\"}</span>\n          <div>\n            {!!connectedTo && messages[connectedTo] ? (\n              <div>\n                {messages[connectedTo].map(({ name: sender, message: text, time }) => (\n                  <div key={`msg-${name}-${time}`}>\n                      <span>{sender === name ? 'You' : sender}</span>\n                      <div>\n                        <span>\n                          {formatRelative(new Date(time), new Date())}\n                        </span>\n                      </div>\n                      <span>{text}</span>\n                    </div>\n                ))}\n              </div>\n            ) : (\n                <div>\n                  <span name=\"discussions\" />\n                  No messages available yet\n                </div>\n            )}\n              <FormInput \n                type=\"text\"\n                value={message}\n                onChange={e => setMessage(e.target.value)}\n                placeholder=\"Type message\"\n              />\n              <CustomButton color=\"teal\" disabled={!message} onClick={sendMsg}>\n                <span>\n                Send Message\n                </span>\n              </CustomButton>\n          </div>\n        </div>\n  );\n};\nexport default MessageBox;","import React, { useState, useEffect, useRef } from \"react\";\nimport { format } from \"date-fns\";\nimport \"../App.css\";\nimport UsersList from \"./UsersList\";\nimport MessageBox from \"./MessageBox\";\nimport FormInput from '../helpers/form-input/form-input.component';\nimport CustomButton from \"../helpers/custom-button/custom-button.component\";\n\n// Use for remote connections\nconst configuration = {\n  iceServers: [{ url: \"stun:stun.1.google.com:19302\" }]\n};\n\n// Use for local connections\n\nconst Chat = ({ connection, updateConnection, channel, updateChannel }) => {\n  const [socketOpen, setSocketOpen] = useState(false);\n  const [socketMessages, setSocketMessages] = useState([]);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [loggingIn, setLoggingIn] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [connectedTo, setConnectedTo] = useState(\"\");\n  const [connecting, setConnecting] = useState(false);\n  const connectedRef = useRef();\n  const webSocket = useRef(null);\n  const [message, setMessage] = useState(\"\");\n  const messagesRef = useRef({});\n  const [messages, setMessages] = useState({});\n  // const { userDetails } = useContext(UserDetailContext)\n  \n  // console.log(userDetails);\n  \n\n  useEffect(() => {\n    webSocket.current = new WebSocket('ws://stock-raid-chat-server.herokuapp.com/');\n    webSocket.current.onmessage = message => {\n      const data = JSON.parse(message.data);\n      setSocketMessages(prev => [...prev, data]);\n    };\n    webSocket.current.onclose = () => {\n      webSocket.current.close();\n    };\n    return () => webSocket.current.close();\n  }, []);\n\n  useEffect(() => {\n    let data = socketMessages.pop();\n    if (data) {\n      switch (data.type) {\n        case \"connect\":\n          setSocketOpen(true);\n          break;\n        case \"login\":\n          onLogin(data);\n          break;\n        case \"updateUsers\":\n          updateUsersList(data);\n          break;\n        case \"removeUser\":\n          removeUser(data);\n          break;\n        case \"offer\":\n          onOffer(data);\n          break;\n        case \"answer\":\n          onAnswer(data);\n          break;\n        case \"candidate\":\n          onCandidate(data);\n          break;\n        default:\n          break;\n      }\n    }\n  }, [socketMessages]);\n\n  const send = data => {\n    webSocket.current.send(JSON.stringify(data));\n  };\n\n  const handleLogin = () => {\n    setLoggingIn(true);\n    send({\n      type: \"login\",\n      name\n    });\n  };\n\n  const updateUsersList = ({ user }) => {\n    setUsers(prev => [...prev, user]);\n  };\n\n  const removeUser = ({ user }) => {\n    setUsers(prev => prev.filter(u => u.userName !== user.userName));\n  }\n\n  const handleDataChannelMessageReceived = ({ data }) => {\n    const message = JSON.parse(data);\n    const { name: user } = message;\n    let messages = messagesRef.current;\n    let userMessages = messages[user];\n    if (userMessages) {\n      userMessages = [...userMessages, message];\n      let newMessages = Object.assign({}, messages, { [user]: userMessages });\n      messagesRef.current = newMessages;\n      setMessages(newMessages);\n    } else {\n      let newMessages = Object.assign({}, messages, { [user]: [message] });\n      messagesRef.current = newMessages;\n      setMessages(newMessages);\n    }\n  };\n\n  const onLogin = ({ success, message, users: loggedIn }) => {\n    setLoggingIn(false);\n    if (success) {\n      alert('Logged in successfully!');\n      setIsLoggedIn(true);\n      setUsers(loggedIn);\n      let localConnection = new RTCPeerConnection(configuration);\n      //when the browser finds an ice candidate we send it to another peer\n      localConnection.onicecandidate = ({ candidate }) => {\n        let connectedTo = connectedRef.current;\n\n        if (candidate && !!connectedTo) {\n          send({\n            name: connectedTo,\n            type: \"candidate\",\n            candidate\n          });\n        }\n      };\n      localConnection.ondatachannel = event => {\n        console.log(\"Data channel is created!\");\n        let receiveChannel = event.channel;\n        receiveChannel.onopen = () => {\n          console.log(\"Data channel is open and ready to be used.\");\n        };\n        receiveChannel.onmessage = handleDataChannelMessageReceived;\n        updateChannel(receiveChannel);\n      };\n      updateConnection(localConnection);\n    } else {\n      alert(`${message}`);\n    }\n  };\n\n  //when somebody wants to message us\n  const onOffer = ({ offer, name }) => {\n    setConnectedTo(name);\n    connectedRef.current = name;\n\n    connection\n      .setRemoteDescription(new RTCSessionDescription(offer))\n      .then(() => connection.createAnswer())\n      .then(answer => connection.setLocalDescription(answer))\n      .then(() =>\n        send({ type: \"answer\", answer: connection.localDescription, name })\n      )\n      .catch(e => {\n        console.log({ e });\n        alert('An error has occurred.');\n      });\n  };\n\n  //when another user answers to our offer\n  const onAnswer = ({ answer }) => {\n    connection.setRemoteDescription(new RTCSessionDescription(answer));\n  };\n\n  //when we got ice candidate from another user\n  const onCandidate = ({ candidate }) => {\n    connection.addIceCandidate(new RTCIceCandidate(candidate));\n  };\n\n  //when a user clicks the send message button\n  const sendMsg = () => {\n    const time = format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\");\n    let text = { time, message, name };\n    let messages = messagesRef.current;\n    let connectedTo = connectedRef.current;\n    let userMessages = messages[connectedTo];\n    if (messages[connectedTo]) {\n      userMessages = [...userMessages, text];\n      let newMessages = Object.assign({}, messages, {\n        [connectedTo]: userMessages\n      });\n      messagesRef.current = newMessages;\n      setMessages(newMessages);\n    } else {\n      userMessages = Object.assign({}, messages, { [connectedTo]: [text] });\n      messagesRef.current = userMessages;\n      setMessages(userMessages);\n    }\n    channel.send(JSON.stringify(text));\n    setMessage(\"\");\n  };\n\n  const handleConnection = name => {\n\n    let dataChannel = connection.createDataChannel(\"messenger\");\n\n    dataChannel.onerror = error => {\n      alert('An error has occurred.');\n    };\n\n    dataChannel.onmessage = handleDataChannelMessageReceived;\n    updateChannel(dataChannel);\n\n    connection\n      .createOffer()\n      .then(offer => connection.setLocalDescription(offer))\n      .then(() =>\n        send({ type: \"offer\", offer: connection.localDescription, name })\n      )\n      .catch(e =>\n        alert('An error has occurred.'));\n  };\n\n  const toggleConnection = userName => {\n    if (connectedRef.current === userName) {\n      setConnecting(true);\n      setConnectedTo(\"\");\n      connectedRef.current = \"\";\n      setConnecting(false);\n    } else {\n      setConnecting(true);\n      setConnectedTo(userName);\n      connectedRef.current = userName;\n      handleConnection(userName);\n      setConnecting(false);\n    }\n  };\n  return (\n    <div className=\"chat\">\n      {(socketOpen && (\n        <>\n          <div >\n            <div>\n              {/* {console.log(userDetails.username) && setName(userDetails.username) && handleLogin} */}\n              {(!isLoggedIn && (\n                <>\n                  <FormInput \n                  disabled={loggingIn}\n                  type=\"text\"\n                  onChange={e => setName(e.target.value)}\n                  placeholder=\"Username\"/>\n                  <CustomButton\n                    disabled={!name || loggingIn}\n                    onClick={handleLogin}\n                  >\n                    Login\n                  </CustomButton>\n                </>\n              )) || (\n                <div >\n                  Logged In as: {name}\n                </div>\n              )}\n            </div>\n          </div>\n          <div>\n            <UsersList\n              users={users}\n              toggleConnection={toggleConnection}\n              connectedTo={connectedTo}\n              connection={connecting}\n            />\n            <MessageBox\n              messages={messages}\n              connectedTo={connectedTo}\n              message={message}\n              setMessage={setMessage}\n              sendMsg={sendMsg}\n              name={name}\n            />\n          </div>\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default Chat;","import React from \"react\";\nimport Chat from \"./Chat\";\nimport { ConnectionConsumer, ChannelConsumer} from '../stockComponents/play-page.components';\nconst Container = () => {\n  return (\n    <ConnectionConsumer>\n      {({ connection, updateConnection }) => (\n        <ChannelConsumer>\n          {({ channel, updateChannel }) => (\n            <Chat\n              connection={connection}\n              updateConnection={updateConnection}\n              channel={channel}\n              updateChannel={updateChannel}\n            />\n          )}\n        </ChannelConsumer>\n      )}\n    </ConnectionConsumer>\n  );\n};\nexport default Container","import { createContext } from 'react';\n\n\nconst ChannelContext = createContext({\n    channel: null,\n    updateChannel: () => {}\n});\n\nexport default ChannelContext;","import { createContext } from 'react';\n\n\nconst ConnectionContext = createContext({\n    connection: null,\n    updateConnection: () => {}\n});\n\nexport default ConnectionContext;","import React, { useState, useContext } from 'react';\nimport CustomButton from '../helpers/custom-button/custom-button.component';\nimport FormInput from '../helpers/form-input/form-input.component';\n// import UserDetailContext from '../contexts/user-detail.contexts';\nimport AllStocksContext from '../helpers/contexts/stock-detail.contexts';\nimport './wallet.styles.css';\n\nconst MoneyAdder = (props) => {\n    const { cancelAdding } = props;\n    const { userWalletDetails } = useContext(AllStocksContext);\n    const [amountToAdd, setAmountToAdd] = useState('')\n    \n    const handleChange = event => {\n        const { value } = event.target;\n        setAmountToAdd(value);\n    };\n    const addMoney = async () => {\n        if (amountToAdd <= 0) {\n            const err = new Error('Enter correct amount to add');\n            return err;\n        }\n        try {\n            const walletUpdate = await fetch(`https://stock-raid-basic-server.herokuapp.com/api/wallet/${userWalletDetails.email}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    walletBalance: userWalletDetails.walletBalance + amountToAdd >= 0 ? userWalletDetails.walletBalance + amountToAdd : 0,\n                })\n            });\n            const walletUpdateJson = await walletUpdate.json();\n            console.log(walletUpdateJson);\n            \n        } catch (error) {\n            const err = new Error('Transaction failed', 500);\n            return err;\n        }\n    }\n\n    const cancelButton = () => {\n        cancelAdding();\n        setAmountToAdd('');\n    }\n    return (\n        <form onSubmit={addMoney}>\n            <FormInput\n                type='number'\n                name='money'\n                label='Enter Amount'\n                value={amountToAdd}\n                onChange={handleChange}\n                min={0}\n                max={1000000}\n            />\n            <CustomButton type='submit'>ADD</CustomButton>\n            <CustomButton onClick={cancelButton}>CANCEL</CustomButton>\n        </form>\n    )\n}\nfunction Wallet() {\n    // const walletDetails = JSON.parse(localStorage.getItem('userWalletDetails'))\n    const { userWalletDetails } = useContext(AllStocksContext);\n    const { walletBalance } = userWalletDetails;\n    const [moreMoneyNeeded, setMoreMoneyNeeded] = useState(false);\n    const addAmount = () => setMoreMoneyNeeded(true);\n\n    const cancelAdding = () => {\n        setMoreMoneyNeeded(false);\n    }\n    \n    return (\n        <div className='wallet-container wallet'>\n            <h3>Wallet Details</h3>\n            <h2>${walletBalance}</h2>\n            <CustomButton onClick={addAmount}>Add More Money</CustomButton>\n            {moreMoneyNeeded && <MoneyAdder cancelAdding={cancelAdding} />}\n        </div>\n    )\n}\n\nexport default Wallet;","import React, { useState, useEffect, useContext, createContext } from 'react';\nimport StockCard from '../stockCards/stock-cards.components';\nimport UserStocks from '../userStocks/user-stocks.components';\nimport Container from '../chatComponents/Container';\nimport AllStocksContext from '../helpers/contexts/stock-detail.contexts';\nimport UserStocksContext from '../helpers/contexts/user-stocks.contexts';\nimport UserDetailContext from '../helpers/contexts/user-detail.contexts';\nimport ChannelContext from '../helpers/contexts/chat-channel.contexts';\nimport ConnectionContext from '../helpers/contexts/chat-connection.contexts';\nimport Wallet from '../wallet/wallet.component';\nimport FormInput from '../helpers/form-input/form-input.component';\n\n\nfunction PlayPage() {\n    const [stockList, setStockList] = useState([]);\n    const [userStocksList, setUserStocksList] = useState([]);\n    const [userWalletDetails, setUserWalletDetails] = useState(0);\n    const [allStockSearchField, setAllStockSearchField] = useState('')\n    const [userStockSearchField, setUserStockSearchField] = useState('')\n    const { userDetails } = useContext(UserDetailContext);\n    const [connection, setconnection] = useState(null);\n    const [channel, setChannel] = useState(null);\n    const updateConnection = conn => {\n        setconnection(conn);\n    };\n    const updateChannel = chn => {\n        setChannel(chn);\n    };\n\n    useEffect(() => {\n        const getAllStocks = () => {\n            try {\n                const allStocksData = new EventSource('https://stock-raid-basic-server.herokuapp.com/api/stocks');\n                allStocksData.onmessage = e => {\n                    console.log(JSON.parse(e.data))\n                    const allStocksJson = JSON.parse(e.data);\n                    setStockList(allStocksJson.stocks);\n                }\n            } catch (error) {\n                const err = new Error('Cannot get stocks data', 500);\n                return err;\n            }\n        }\n        const currentUserStocks = () => {\n            try {\n                const userStocksData = new EventSource(`https://stock-raid-basic-server.herokuapp.com/api/userstocks/${userDetails.email}`);\n                userStocksData.onmessage = e => {\n                    // console.log(JSON.parse(e.data));\n                    const userStocksJson = JSON.parse(e.data);\n                    console.log(userStocksJson.userStocks);\n                    setUserStocksList(userStocksJson.userStocks);\n                }\n            } catch (error) {\n                const err = new Error('Cannot get stocks data', 500);\n                return err;\n            }\n        }\n        const getUserWallet = async () => {\n            try {\n                const userWallet = new EventSource(`https://stock-raid-basic-server.herokuapp.com/api/wallet/${userDetails.email}`);\n                userWallet.onmessage = e => {\n                    const userWalletJson = JSON.parse(e.data);\n                    console.log(userWalletJson)\n                    setUserWalletDetails(userWalletJson.wallet);\n                }\n                // const userWalletJson = await userWallet.json();\n                \n            } catch (error) {\n                const err = new Error('Can not get user\\'s wallet balance data', 500)\n                return err;\n            }\n        }\n        getAllStocks();\n        currentUserStocks();\n        getUserWallet();\n    }, []);\n    const onAllStockSearchChange = event => {\n        setAllStockSearchField(event.target.value);\n    };\n    const onUserStockSearchChange = event => {\n        setUserStockSearchField(event.target.value);\n    };\n    // useEffect(() => console.log(userStocksList), [userStocksList])\n    // setInterval(() => console.log(userStocksList), 6000);\n    const filteredStockList = stockList.filter(stocks =>\n        stocks.stockname.toLowerCase().includes(allStockSearchField.toLowerCase())\n        || stocks.stocksymbol.toLowerCase().includes(allStockSearchField.toLowerCase()));\n    const filteredUserStocksList = userStocksList.filter(stocks =>\n        stocks.stockName.toLowerCase().includes(userStockSearchField.toLowerCase()));\n    \n    \n    return (\n        <>\n        <div>\n            <AllStocksContext.Provider value={{\n                userWalletDetails\n            }}>\n                <Wallet/>\n            </AllStocksContext.Provider>\n        <h2>Start with Stocks</h2>\n        {/* <SearchBox label={'Search Stocks To Buy'} onSearchChange={onSearchChange}/> */}\n        <FormInput value={allStockSearchField} label={'Search Stocks To Buy'} onChange={onAllStockSearchChange}/>\n            {filteredStockList.map(stock => (\n                <AllStocksContext.Provider value={{\n                    stock,\n                    userWalletDetails\n                }}>\n                    <StockCard key={stock.id}/>\n                </AllStocksContext.Provider>\n            ))}\n        </div>\n        <div>\n            <FormInput value={userStockSearchField} label={'Search Stocks To Sell'} onChange={onUserStockSearchChange}/>\n            {filteredUserStocksList.map(userStock => (\n            <UserStocksContext.Provider value={{\n                userStock,\n                userWalletDetails,\n                stockList\n            }}>\n                <UserStocks key={userStock.id}/>\n            </UserStocksContext.Provider>\n        ))}\n        <div>\n            <ConnectionContext.Provider value={{ connection, updateConnection }}>\n            <ChannelContext.Provider value={{ channel, updateChannel }}>\n                <Container />\n            </ChannelContext.Provider>\n            </ConnectionContext.Provider>\n        </div>\n        </div>\n        </>\n    );\n}\n\nexport const ConnectionConsumer = ConnectionContext.Consumer\nexport const ChannelConsumer = ChannelContext.Consumer\nexport default PlayPage;","import React, { useState } from 'react';\nimport FormInput from '../helpers/form-input/form-input.component';\nimport CustomButton from '../helpers/custom-button/custom-button.component';\n\nfunction LoginPage() {\n\n    const [ userCredentials, setCredentials ] = useState({email: '',password: ''})\n    const { email, password } = userCredentials;\n\n    const handleChange = event => {\n      const { value, name } = event.target;\n      setCredentials({...userCredentials, [name]: value });\n    };\n\n    const loginHandler = async (event) => {\n        event.preventDefault();\n        try {\n            const response = await fetch('https://stock-raid-basic-server.herokuapp.com/api/users/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    email: email,\n                    password: password\n                })\n            });\n            const responseData = await response.json();\n            console.log(responseData);\n            if (responseData) {\n                localStorage.clear();\n                localStorage.setItem('currentUser', JSON.stringify(responseData.user));\n                localStorage.setItem('userWalletDetails', JSON.stringify(responseData.walletDetails));\n            }\n            // console.log(localStorage.getItem('currentUser'));\n            \n        } catch (error) {\n            const err = new Error('Can not log you in, try again later', 500);\n            return err;\n        }\n    }\n    return (\n        <>\n        <h3>Login</h3>\n        <form onSubmit={loginHandler}>\n            <FormInput name='email' type='email' label='Email' value={email} onChange={handleChange}/>\n            <FormInput name='password' type='password' label='Password' value={password} onChange={handleChange}/>\n            <CustomButton type='submit'>LOG IN</CustomButton>\n        </form>\n        </>\n    )\n}\n\n\nexport default LoginPage;","import React, { useState } from 'react';\nimport FormInput from '../helpers/form-input/form-input.component';\nimport CustomButton from '../helpers/custom-button/custom-button.component';\nimport './loginAndSignUp.styles.css';\n\nfunction SignUpPage() {\n\n    const [ userCredentials, setCredentials ] = useState({username: '',email: '',password: ''})\n    const { username, email, password } = userCredentials;\n\n    const handleChange = event => {\n      const { value, name } = event.target;\n      setCredentials({...userCredentials, [name]: value });\n    };\n\n    const signUpHandler = async (event) => {\n        // event.preventDefault();\n        try {\n            const signUpResponse = await fetch('https://stock-raid-basic-server.herokuapp.com/api/users/signup', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    username: username,\n                    email: email,\n                    password: password\n                })\n            });\n            const signUpResponseJson = await signUpResponse.json();\n            // console.log(responseData);\n            if (signUpResponseJson) {\n                localStorage.clear();\n                localStorage.setItem('currentUser', JSON.stringify(signUpResponseJson.user));\n                localStorage.setItem('userWalletDetails', JSON.stringify(signUpResponseJson.walletDetails));\n            }\n            // console.log(localStorage.getItem('currentUser'));\n        } catch (error) {\n            const err = new Error('Not able to sign up, try again later', 500);\n            return err;\n        }\n    }\n    return (\n        <div className='sign-in-and-sign-up'>\n        <h3>Sign Up</h3>\n        <form onSubmit={signUpHandler}>\n            <FormInput name='username' type='text' label='Name' value={username} onChange={handleChange}/>\n            <FormInput name='email' type='email' label='Email' value={email} onChange={handleChange}/>\n            <FormInput name='password' type='password' label='Password' value={password} onChange={handleChange}/>\n            <CustomButton type='submit'>SIGN UP</CustomButton>\n        </form>\n        </div>\n    )\n}\n\nexport default SignUpPage;","import React from 'react';\n\nimport LoginPage from './login.component';\nimport SignUpPage from './signUp.component';\n\nimport './loginAndSignUp.styles.css';\n\nconst SignInAndSignUpPage = () => (\n  <div className='sign-in-and-sign-up'>\n    <LoginPage />\n    <SignUpPage />\n  </div>\n);\n\nexport default SignInAndSignUpPage;","import React from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport PlayPage from './stockComponents/play-page.components';\nimport UserDetailContext from './helpers/contexts/user-detail.contexts';\nimport SignInAndSignUpPage from './userComponents/loginAndSignUp.component';\nimport CustomButton from './helpers/custom-button/custom-button.component';\n\nconst App = () => {\n\n  const userDetails = JSON.parse(localStorage.getItem('currentUser'));\n  return (\n    <>\n    <div className='grid-container'>\n      \n    <BrowserRouter>\n    <Switch>\n    <UserDetailContext.Provider value={{\n        userDetails\n    }}>\n      <CustomButton onClick={() => localStorage.removeItem('currentUser')}>Sign Out</CustomButton>\n        {/* <Route exact path='/signin' component={ SignInAndSignUpPage }></Route> */}\n        <Route\n              exact\n              path='/'\n              render={() =>\n                userDetails ? (\n                  <PlayPage/>\n                ) : (\n                  <SignInAndSignUpPage/>\n                )\n              }\n              />\n      </UserDetailContext.Provider>\n      </Switch>\n      </BrowserRouter>\n    </div>\n    </>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}